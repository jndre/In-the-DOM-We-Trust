(function () {

  function getCSPMetaTags() {
    let meta_tags = document.getElementsByTagName("meta");
    let csp_values = [];
    let errors = [];
    for(const meta_tag of meta_tags) {
      if(meta_tag.hasAttribute("http-equiv") && meta_tag.getAttribute("http-equiv") == "Content-Security-Policy") {
        if(!meta_tag.hasAttribute("content")) {
          errors.push(`Invalid tag: ${meta_tag.outerHTML}`);
        } else {
          csp_values.push(meta_tag.getAttribute("content"));
        }
      }
    }
    return { csp: csp_values.join("\n"), errors: errors.join("\n") };
  }

  function getInjectedAttributeTag(context) {
    let tags = context.getElementsByTagName("div");
    if(tags.length == 0) {
      return null;
    } 
    for(const t of tags) {
      if(t.hasAttribute("data-tf")) {
        return t;
      }
    }
    return null;
  }
  function getInjectedTag(context) {
    let tags = context.getElementsByTagName("taintfox");
    if(tags.length == 0) {
      return null;
    } else {
      return tags[0];
    }
  }


  function getParents(tag) {
    let parents = [];
    let parent = tag.parentNode;
    while(parent != null && parent.nodeName != "#document") {
      parents.push(parent);
      parent = parent.parentNode;
    }
    return parents;
  }

  function textContent(tag) {
    return tag.textContent;
  }
  function attributeContent(tag) {
    return tag.getAttribute("data-tf");
  }

  function evaluateAttack(f, content) {
    let res = {
      exists: false,
      context: "",
      content: "",
      error: null,
      csp: "",
      cspReportOnly: "",
      cspMeta: "",
      cspMetaErrors: ""
    };
    try {
      let tag = f(document.body);
      if(tag == null) {
        return res;
      }
      res.exists = true;
      res.content = content(tag);
      let parents = getParents(tag);
      let upwards = `${tag.nodeName}`;
      for(const parent of parents) {
        upwards = `${parent.nodeName}.${upwards}`;
      }
      res.context = upwards;
    } catch(err) {
      res.error = err;
    } finally {
      return res;
    }
  }
  function evaluateTagAttack() {
    return evaluateAttack(getInjectedTag, textContent);
  }

  function evaluateAttributeAttack() {
    return evaluateAttack(getInjectedAttributeTag,attributeContent);
  }
  window.evaluateTagAttack = evaluateTagAttack;
  window.evaluateAttributeAttack = evaluateAttributeAttack;
  window.getCSPMetaTags = getCSPMetaTags;
})();
