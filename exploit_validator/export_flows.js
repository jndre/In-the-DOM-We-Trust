const { MongoClient } = require("mongodb");
const config = require("./config");
var fs = require("fs");
const path = require("path");


function urlToLinuxPath(inputUrl) {
    const filename =
        inputUrl
            .split("#")[0]
            .split("?")[0]
            .replace(/\//g, "_")
            .replace(/[<>:"/\\|?*\x00-\x1F]/g, "_")
            .replace(/[^\x20-\x7E]/g, "")
            .replace("\n", "")
            .trim()
            .slice(0, 100) || "default_file_name";

    return filename; // Return the sanitized file name
}

async function writeToFile(outputDir, document) {
    const dirPath = path.join(outputDir, urlToLinuxPath(document.base_url));
    if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
    }
    const filePath = path.join(dirPath, `${document._id}.json`);
    await fs.promises
        .writeFile(filePath, JSON.stringify(document, null, 2))
        .then(() => {
            /*console.log(`result written to ${filePath}`);*/
        })
        .catch((err) => {
            console.error(`error writing ${document.base_url}:`, err);
        });
}

async function dump(database, dumpDir) {
    const collection = database.collection(config.collection_exploits);

    const cursor = collection.find();

    for await (const document of cursor) {
        await writeToFile(dumpDir, document);
    }
}

async function dumpDocuments(outputDir) {
    const url = `mongodb://${config.host}:${config.port}`;
    const client = new MongoClient(url, {
        socketTimeoutMS: 2147483647,
        useNewUrlParser: true,
        useUnifiedTopology: true,
    });
    await client.connect();
    const database = client.db(config.db_name);

    try {
        await dump(database, outputDir);
    } finally {
        await client.close();
    }
}

const outputDir = process.argv[2];
if (!outputDir) {
    console.error(
        "Please provide an output directory as command line argument.",
    );
    process.exit(1);
}

dumpDocuments(outputDir).catch(console.error);
