(function (global) {
  "use strict";

  // Node modules
  var breakGen = require("./exploit-generator-js-break.js");
  var htmlExploitGen = require("./exploit-generator-html.js");
  var urlGen = require("./url-generator.js");
  var parser = require("./exploit-generator-js-parser.js");

  function generateExploit(finding, taint) {
    var exploits = {
      methodA: [],
      methodB: [],
      methodC: [],
    };
    taint.replaceSettings.forEach((setting) => {
      setting.context = {
        type: "js",
        token: "",
        content: "",
      };
      // getting break sequences for JS
      var breakSequencesJS = generateJSBreakSequences(finding, taint, setting);
      if (!breakSequencesJS) breakSequencesJS = breakGen.getDefaultBreak();

      // getting break sequences for HTML
      var breakSequencesHTML = htmlExploitGen.generateBreakSequences(
        finding,
        taint,
        setting
      );

      // building the exploit URLs
      setting.inBreak = breakSequencesHTML.inBreak;
      setting.outBreak =
        breakSequencesJS.outBreak + breakSequencesHTML.outBreak;
      var comingExploits = urlGen.generateUrl(finding, taint, setting);
      if (exploits.methodA.length === 0) {
        comingExploits.methodA.forEach((exploit) => {
          if (exploit.url !== null)
            exploits.methodA = exploits.methodA.concat(comingExploits.methodA);
        });
      }
      comingExploits.methodB.forEach((exploit) => {
        if (exploit.url !== null)
          exploits.methodB = exploits.methodB.concat(comingExploits.methodB);
      });
      comingExploits.methodC.forEach((exploit) => {
        if (exploit.url !== null)
          exploits.methodC = exploits.methodC.concat(comingExploits.methodC);
      });
    });
    return exploits;
  }

  function generateJSBreakSequences(finding, taint, setting) {
    console.log("-> Generating break sequences");
    var taintedNodes = parser.getTaintedNodes(finding, taint);
    var regex = parser.getRegex(finding, taint);
    if (!taintedNodes) return;
    try {
      return breakGen.getBestBreakSequences(
        finding,
        taintedNodes,
        taint,
        setting,
        regex
      );
    } catch (err) {
      return;
    }
  }

  global.generateExploit = generateExploit;
})(exports);
