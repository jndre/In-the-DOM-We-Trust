(function(global) {
    'use strict';
    
    function reverseFunctions (taint, sequence) {
        let newSequence = sequence;
        let hashPresent = false;
        if (sequence.indexOf('#') === 0) {
            hashPresent = true;
            newSequence = newSequence.substring(1);
        }

      // Don't try to reverse decode operations
//        taint.operators.forEach(step => {
//            newSequence = encodeWhenDecoded(step.operation, newSequence)
//        });

        return hashPresent ? '#'+newSequence : newSequence;
    }

	function encodeWhenDecoded(operation, sequence) {
        let newSequence = sequence;
        if (operation === 'unescape') {
            newSequence = escape(newSequence)
        } else if (operation === 'decodeURI') {
            newSequence = encodeURI(newSequence)
        } else if (operation === 'decodeURIComponent') {
            newSequence = encodeURIComponent(newSequence)
        }
        return newSequence;
    }

    global.reverseFunctions = reverseFunctions;

})(exports);
