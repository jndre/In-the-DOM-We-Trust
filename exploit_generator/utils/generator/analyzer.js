(function(global) {
	'use strict';

	const decoder = require('./decoder.js');

	function enhanceTaintInfo(finding) {
		for (var taintId in finding.taint) {
			setURLIndexes(finding, finding.taint[taintId]);
			finding.taint[taintId].replaceSettings.forEach(setting => {
				setting.rangeIndex = taintId;
				setReplaceSettings(finding, finding.taint[taintId], setting);
			})
		}
	}

	function setURLIndexes(finding, taint) {
		const replaceSettings = [];
		var taintPart = decoder.decodeCompletley(finding.param.substring(taint.begin, taint.end));
		const startIndices = getIndicesOf(taintPart, finding.location);
		startIndices.forEach(indice => {
			replaceSettings.push({
				beginTaintURL: indice,
				endTaintURL: indice + taintPart.length
			})
		})
		taint.replaceSettings = replaceSettings;
		// taint.beginTaintURL = finding.location.indexOf(taintPart);
		// taint.endTaintURL = finding.location.indexOf(taintPart) + taintPart.length;
	}

	function setReplaceSettings(finding, taint, setting) {
		if (isCompletleyModifiable(finding, setting)) {
			return adaptTaintForCompletley(taint, setting);
		} else if (isPartlyModifiable(finding, setting)) {
			return adaptTaintForPartly(finding, taint, setting);
		} else if (isEndModifiable(finding, taint)) {
			return adaptTaintForEnd(finding, taint, setting);
		} else {
			return adaptTaintForEnd(finding, taint, setting);
		}
	}

	// First case: taint in search or hash -> normal replace
	function isCompletleyModifiable(finding, setting) {
		if (finding.location.indexOf('?') >= 0) {
			return finding.location.indexOf('?') < setting.beginTaintURL;
		} else if (finding.location.indexOf('#') >= 0) {
			return finding.location.indexOf('#') < setting.beginTaintURL;
		} else {
			return false;
		}
	}

	function adaptTaintForCompletley(taint, setting) {
		setting.replaceBeginURL = setting.beginTaintURL;
		setting.replaceEndURL = setting.endTaintURL;
		setting.replaceBeginParam = taint.begin;
		setting.replaceEndParam = taint.end;
	}


	// Second case: taint partly in search or hash -> reduce taint
	function isPartlyModifiable(finding, setting) {
		if (finding.location.indexOf('?') >= 0) {
			return finding.location.indexOf('?') <= setting.endTaintURL &&
			       finding.location.indexOf('?') > setting.beginTaintURL;
		} else if (finding.location.indexOf('#') >= 0) {
			return finding.location.indexOf('#') <= setting.endTaintURL &&
			       finding.location.indexOf('#') > setting.beginTaintURL;
		} else {
			return false;
		}
	}

	function adaptTaintForPartly(finding, taint, setting) {
		if (finding.location.indexOf('?') >= 0 && setting.beginTaintURL !== undefined) {
			setting.replaceBeginURL = finding.location.indexOf('?') + 1;
			setting.replaceEndURL = setting.endTaintURL;
			setting.replaceBeginParam = taint.begin + (finding.location.indexOf('?') - setting.beginTaintURL);
			setting.replaceEndParam = taint.end;
		} else if (finding.location.indexOf('#') >= 0 && setting.beginTaintURL !== undefined) {
			setting.replaceBeginURL = finding.location.indexOf('#') + 1;
			setting.replaceEndURL = setting.endTaintURL;
			setting.replaceBeginParam = taint.begin + (finding.location.indexOf('#') - setting.beginTaintURL);
			setting.replaceEndParam = taint.end;
		}
	}


	// Third case: taint till end with path -> append query or hash
	function isEndModifiable(finding, taint) {
		return finding.location.indexOf(taint.param) + taint.param.length === finding.location.length;
	}

	function adaptTaintForEnd(finding, taint, setting) {
		setting.replaceBeginURL = finding.location.length;
		setting.replaceEndURL = setting.replaceBeginURL;
		setting.replaceBeginParam = taint.end;
		setting.replaceEndParam = taint.end;
	}


	// Taint index conversion for URL
        // param is the string flowing into the sink
        // finds the index of the tainted substring
	// function getUrlTaintBegin(finding, taint) {
	// 	return finding.location.indexOf(finding.param.substring(taint.begin, taint.end));
	// }

	// function getUrlTaintEnd(finding, taint) {
	// 	var snippet = finding.param.substring(taint.begin, taint.end);
	// 	return finding.location.indexOf(snippet) + snippet.length;
	// }

	function getIndicesOf(searchStr, str, caseSensitive) {
		var searchStrLen = searchStr.length;
		if (searchStrLen == 0) {
			return [];
		}
		var startIndex = 0, index, indices = [];
		if (!caseSensitive) {
			str = str.toLowerCase();
			searchStr = searchStr.toLowerCase();
		}
		while ((index = str.indexOf(searchStr, startIndex)) > -1) {
			indices.push(index);
			startIndex = index + searchStrLen;
		}
		return indices;
	}
	

	global.enhanceTaintInfo = enhanceTaintInfo;

})(exports);
